/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: ".*PREPARE_GENOME:.*" {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            enabled: params.save_reference
        ]
    }

    withName: ".*BEDTOOLS_MAKEWINDOWS.*" {
        ext.args = { "-w ${params.binsize}" }
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            enabled: true
        ]
    }

    if (!params.skip_multiqc) {
        process {
            ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
            publishDir = [
                path: { "${params.outdir}/multiqc" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    if (params.trimmer == 'trimmomatic') {
        withName: 'TRIMMOMATIC' {
            publishDir = [
                enabled: false
            ]
            ext.args2 = 'ILLUMINACLIP:TruSeq3-PE.fa:2:30:10:2:True LEADING:3 TRAILING:3 MINLEN:36'
        }
    }

    if (params.trimmer == 'trimgalore') {
        withName: 'TRIMGALORE' {
            publishDir = [
                enabled: false
            ]
            ext.args = '--illumina --quality 20 --length 36'
        }
    }


    //
    // Alignment, Picard MarkDuplicates and Filtering options
    //

    withName: 'UNTAR_.*|BWA_INDEX|BOWTIE2_BUILD' {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    if (params.aligner == 'bwaaln') {
    withName: '.*FASTQ_ALIGN_BWAALN:.*' {
        publishDir = [
            enabled: false
            ]
        }
        withName: '.*FASTQ_ALIGN_BWAALN:BWA_SAMSE' {
        ext.args = {
            def rg_id = meta.id
            def rg_sm = meta.experimentalID
            return "-r '@RG\\tID:${rg_id}\\tSM:${rg_sm}\\tPL:${params.platform}'"
            }
        }
        withName: '.*FASTQ_ALIGN_BWAALN:BWA_SAMPE' {
        ext.args = {
            def rg_id = meta.id
            def rg_sm = meta.experimentalID
            return "-r '@RG\\tID:${rg_id}\\tSM:${rg_sm}\\tPL:${params.platform}'"
            }
        }
    }

    if (params.aligner == 'bwamem') {
        withName: '.*FASTQ_ALIGN_DNA:.*' {
            publishDir = [
                enabled: false
                ]
            }
        withName: '.*FASTQ_ALIGN_DNA:BWAMEM1_MEM' {
        ext.args = {
            def rg_id = meta.id
            def rg_sm = meta.experimentalID
            return "-R '@RG\\tID:${rg_id}\\tSM:${rg_sm}\\tPL:${params.platform}'"
            }
        }
    }


    if (params.aligner == 'bowtie2') {
        withName: '.*FASTQ_ALIGN_DNA:BOWTIE2_ALIGN' {
            ext.args = {
                [
                    '--end-to-end --non-deterministic --very-sensitive',
                    "--rg-id ${meta.id}",
                    "--rg SM:${meta.experimentalID}",
                    "--rg PL:${params.platform}"
                ].join(' ')
            }
            publishDir = [
                enabled: false
            ]
        }
    }

    withName: '.*BAM_MARKDUPLICATES_PICARD:PICARD_MARKDUPLICATES.*' {
        ext.args   = '--ASSUME_SORTED true --REMOVE_DUPLICATES false --VALIDATION_STRINGENCY LENIENT --TMP_DIR tmp'
        ext.prefix = { "${meta.id}.md" }
        publishDir = [
            [
                path: { "${params.outdir}/reports/markduplicates" },
                mode: params.publish_dir_mode,
                pattern: '*metrics.txt',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/alignment/markduplicates" },
                mode: params.publish_dir_mode,
                pattern: '*.md.{bam,bai}',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                //enable: params.save_markduplicates_bam
            ]
        ]
    }

    withName: '.*BAM_MARKDUPLICATES_PICARD:SAMTOOLS_INDEX.*' {
        ext.prefix  = { "${meta.id}.markdup.sorted" }
        publishDir  = [
            path: { "${params.outdir}/alignment/markduplicates" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: '*.{bai,csi}'
        ]
    }

    withName: '.*BAM_MARKDUPLICATES_PICARD:BAM_STATS_SAMTOOLS.*' {
        ext.args    = ""
        publishDir  = [
            path: { "${params.outdir}/reports/samtools_stats/${meta.id}/md/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: '*.{stats,flagstat,idxstats}'
        ]
    }

    withName: '.*FILTER_BAM_SAMTOOLS:SAMTOOLS_VIEW.*' {
        ext.args = [
            "-F${params.flag}",
            "-q${params.q_score}",
            params.keep_regions_bed ? "-L ${params.keep_regions_bed}" : '',
            "-b"
        ].join(' ').trim()
        ext.prefix = { "${meta.id}.q${params.q_score}" }
        publishDir = [
            path: { "${params.outdir}/alignment/filtered" },
            mode: params.publish_dir_mode,
            pattern: "*.bam"
        ]
    }

    withName: '.*FILTER_BAM_SAMTOOLS:SAMTOOLS_INDEX.*' {
        ext.prefix  = { "${meta.id}.min_q${params.q_score}" }
        publishDir  = [
            path: { "${params.outdir}/alignment/filtered" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: '*.{bai,csi}'
        ]
    }

    withName: '.*FILTER_BAM_SAMTOOLS:BAM_STATS_SAMTOOLS.*' {
        ext.args    = ""
        publishDir  = [
            path: { "${params.outdir}/reports/samtools_stats/${meta.id}/filtered" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: '*.{stats,flagstat,idxstats}'
        ]
    }

    withName: ".*SAMTOOLS_FAIDX.*" {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: '.*DEEPTOOLS_BAMCOVERAGE.*' {
        ext.args = [
            params.extendReads ? "--extendReads ${params.extendReads}" : '',
            "--binSize ${params.bw_resolution}",
            "--normalizeUsing ${params.normalizeUsing}",
            params.effectiveGenomeSize ? "--effectiveGenomeSize ${params.effectiveGenomeSize}" : '',
            params.ignoreForNormalization ? "--ignoreForNormalization ${params.ignoreForNormalization}" : '',
            "--exactScaling",
            // params.blacklist ? "--blackListFileName ${params.blacklist}" : '',
        ].join(' ').trim()
        ext.prefix = { "${meta.id}.q${params.q_score}.${params.normalizeUsing}" }
        publishDir = [
            path: { "${params.outdir}/single_tracks/deeptools" },
            mode: params.publish_dir_mode,
            pattern: '*.bw'
        ]
    }

    withName: '.*DEEPTOOLS_QC:DEEPTOOLS_MULTIBIGWIGSUMMARY.*' {
        ext.args = [
            "--smartLabels",
            "--binSize ${params.binsize}",
            "--outRawCounts outRawCounts.txt"
        ].join(' ').trim()
        ext.prefix = { "${meta.id}" }
        publishDir   = [
            path: { "${params.outdir}/reports/deeptools/multibigwigsummary" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }

    withName: '.*DEEPTOOLS_QC:DEEPTOOLS_PLOTCORRELATION.*' {
        ext.args = [
            "--skipZeros",
            "--removeOutliers",
            "--plotNumbers",
            "--corMethod ${params.corr_method}"
        ].join(' ').trim()
        ext.prefix = { "${meta.id}" }
        publishDir   = [
            path: { "${params.outdir}/reports/deeptools/plotcorrelation" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }

    withName: '.*DEEPTOOLS_QC:DEEPTOOLS_PLOTPCA.*' {
        ext.args = ""
        ext.prefix = { "${meta.id}" }
        publishDir   = [
            path: { "${params.outdir}/reports/deeptools/plotpca" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }

    if (params.plotfingerprint) {
        withName: '.*DEEPTOOLS_QC:DEEPTOOLS_PLOTFINGERPRINT_GLOBAL.*' {
            ext.args = [
                "--skipZeros",
                "--smartLabels",
                params.extendReads ? "--extendReads ${params.extendReads}" : '',
                "--numberOfSamples ${params.numberOfSamples}",
                "--plotTitle 'Global Fingerprint Plot'",
            ].join(' ').trim()
            ext.prefix = { "${meta.id}_global" }
            publishDir   = [
                path: { "${params.outdir}/reports/deeptools/plotfingerprint/global" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }

        if (params.region) {
            withName: '.*DEEPTOOLS_QC:DEEPTOOLS_PLOTFINGERPRINT_REGION.*' {
                ext.args = [
                    "--skipZeros",
                    "--smartLabels",
                    params.region ? "--region ${params.region}" : '',
                    params.extendReads ? "--extendReads ${params.extendReads}" : '',
                    "--numberOfSamples ${params.numberOfSamples}",
                    "--plotTitle 'Region Fingerprint Plot (${params.region})'"
                ].join(' ').trim()
                ext.prefix = { "${meta.id}_region_${params.region.replaceAll(':', '_')}" }
                publishDir = [
                    path: { "${params.outdir}/reports/deeptools/plotfingerprint/${params.region}" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    enabled: true
                ]
            }
        }
    }

    if (params.tss_bed) {
        withName: 'DEEPTOOLS_COMPUTEMATRIX_REFERENCE_POINT' {
            ext.args   = 'reference-point --referencePoint TSS --beforeRegionStartLength 3000 --afterRegionStartLength 2000 --missingDataAsZero --skipZeros'
            ext.prefix = { "${meta.id}.compute_matrix" }
            publishDir = [
                path: { "${params.outdir}/reports/deeptools/computematrix/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: false
            ]
        }

        withName: 'DEEPTOOLS_PLOTPROFILE' {
            ext.prefix = { "${meta.id}.${params.tss_bed.tokenize('/')[-1].replaceAll(/\.bed$/, '')}" }
            ext.args = ""
            publishDir = [
                path: { "${params.outdir}/reports/deeptools/plotprofile/${params.tss_bed.tokenize('/')[-1].replaceAll(/\.bed$/, '')}"} ,
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

        withName: ".*GENOME_BINNING:.*" {
        ext.args = { "-w ${params.binsize}" }
        publishDir = [
            path: { "${params.outdir}/genome/binning" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }

    withName: ".*RTWOSAMPLESMLE.*" {
        publishDir = [
            path: { "${params.outdir}/comparisons/spp_mle" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: '.*DEEPTOOLS_BIGWIGCOMPARE.*' {
        ext.args = [
            params.bigwigcompare_pseudocount ? "--pseudocount ${params.bigwigcompare_pseudocount}" : '',
            params.bigwigcompare_operation ? "--operation ${params.bigwigcompare_operation}" : '',
            params.bigwigcompare_skip_non_covered_regions ? "--skipNonCoveredRegions ${params.bigwigcompare_skip_non_covered_regions}" : '',
            params.bigwigcompare_fixed_step ? "--fixedStep ${params.bigwigcompare_fixed_step}" : '',
            params.bigwigcompare_bin_size ? "--binSize ${params.bigwigcompare_bin_size}" : '',
            // params.blackList ? "--blackListFileName ${params.blackList}" : '',
        ].join(' ').trim()
        ext.prefix = { "${meta.id}.q${params.q_score}.${params.normalizeUsing}" }
        publishDir = [
            path: { "${params.outdir}/comparisons/deeptools_bigwigcompare_bigwig" },
            mode: params.publish_dir_mode,
            pattern: '*.bigWig'
        ]
    }
}
